# 미로(얼음 틀)의 세로 길이 N, 가로 길이 M 입력받기
# input()으로 한 줄 읽고, split()으로 공백 기준 분리, map(int, ...)로 정수로 변환해서 N, M에 저장
n, m = map(int, input().split())

# 2차원 얼음 틀 정보 입력받기
# N번 반복하면서 각 줄을 입력받고, 각 문자(0 또는 1)를 정수로 변환해서 리스트로 저장
# 이렇게 만들어진 리스트들을 다시 하나의 리스트에 담아서 2차원 리스트 'graph' 완성
graph = []
for i in range(n):
    graph.append(list(map(int, input()))) # 문자열 '101' -> 리스트 [1, 0, 1] 로 변환

# 방문한 칸을 기록할 2차원 리스트 초기화하기
# 얼음 틀 크기(N x M)와 똑같이 만들고, 모든 칸을 아직 방문 안 했다는 의미로 False로 채워놔
# 그래야 한 칸을 반복해서 탐색하는 것을 방지할 수 있음
visited = [[False] * m for _ in range(n)]

# DFS 함수 정의하기
# (x, y): 현재 탐색 중인 칸의 좌표
def dfs(x, y):
    # 현재 칸 (x, y)를 방문 처리하기! 이제 이 칸은 탐색 완료!
    visited[x][y] = True

    # 상하좌우 네 방향을 확인하기 위한 방향 벡터 정의 (위, 아래, 왼쪽, 오른쪽)
    # dx: x 좌표(세로) 변화량, dy: y 좌표(가로) 변화량
    dx = [-1, 1, 0, 0]
    dy = [0, 0, -1, 1]

# 여기까지 이해됨

    # 네 방향으로 이동하면서 다음 칸을 탐색 시도!
    for i in range(4): # 0부터 3까지 (네 방향) 반복
        next_x = x + dx[i] # 다음 칸의 x 좌표 계산
        next_y = y + dy[i] # 다음 칸의 y 좌표 계산

        # 다음 칸 (next_x, next_y)가 얼음 틀 범위 안에 있는지 확인!
        # 세로 범위: 0 <= next_x < n , 가로 범위: 0 <= next_y < m
        if 0 <= next_x < n and 0 <= next_y < m:
            # 범위 안에 있다면, 다음 칸의 상태를 확인!
            # 만약 다음 칸이 구멍(값 0)이고, 아직 방문하지 않았다면?
            # 만약 다음 칸이 구멍(값 1)이라면 벽이기에 무시
            if graph[next_x][next_y] == 0 and not visited[next_x][next_y]:
                # 오케이! 연결된 새로운 구멍을 찾았다!
                # 이 칸으로 이동해서 또 거기서부터 연결된 구멍들을 탐색하기 위해 dfs 함수를 다시 호출! (재귀 호출!)
                dfs(next_x, next_y)

# 총 아이스크림 덩어리 개수를 세는 변수 초기화
icecream_count = 0

# 얼음 틀의 모든 칸을 하나씩 확인하면서 아직 방문하지 않은 '0' (구멍)을 찾자!
# 바깥 for문: 세로 방향으로 (0부터 n-1까지)
for i in range(n):
    # 안쪽 for문: 가로 방향으로 (0부터 m-1까지)
    for j in range(m):
        # 현재 칸 (i, j)가 구멍(값 0)이고, 아직 방문하지 않았다면?
        if graph[i][j] == 0 and not visited[i][j]:
            # 와! 새로운 아이스크림 덩어리의 시작점을 찾았어! 🎉
            # 이 칸 (i, j)부터 연결된 모든 구멍을 DFS로 탐색해서 방문 처리하자!
            dfs(i, j)
            # dfs 탐색이 끝나면 이 칸과 연결된 하나의 아이스크림 덩어리를 다 찾고 방문 처리한 거야!
            # 그러니까 아이스크림 개수를 1 증가!
            icecream_count += 1

# 모든 칸을 다 확인했으면, 최종적으로 센 아이스크림 덩어리 개수를 출력!
print(icecream_count)