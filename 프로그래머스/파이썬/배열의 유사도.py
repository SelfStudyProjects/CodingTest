def solution(s1, s2):
    answer = 0;
    i = 0
    j = 0
    for i in range(len(s1)):
        for j in range(len(s2)):
            if s1[i] == s2[j]:
                   answer += 1
    return answer;

'''
js 코드로 작성(동일한 로직)
    function solution(s1, s2) {
    var answer = 0;
    for(i = 0; i < s1.length; i++) {
        for(j = 0; j < s2.length; j++) {
            if(s1[i] === s2[j]) {
                answer += 1
            }
        }
    }
    return answer;
}
'''

'''
# 파이썬 vs 자바스크립트 유사 로직 비교 분석
# 이 두 코드는 '두 문자열에서 같은 문자가 몇 번 나오는지' 세는 문제를 풀고 있어.
# (정확히는 s1의 각 문자와 s2의 각 문자를 비교하여 일치하는 쌍의 개수를 셈.)

# --- 주요 차이점 ---

# 1. 변수 선언 방식 (Variable Declaration)
#    - 파이썬 (위 코드): 변수 선언 시 'var', 'let', 'const' 같은 키워드가 없음.
#      answer = 0  처럼 바로 사용.
#      반복문 변수 i, j도 `for i in range(...)`처럼 바로 사용하면 해당 블록 스코프 내에서 사용됨.
#    - 자바스크립트 (아래 코드): 'var', 'let', 'const' 키워드를 사용해 변수를 명시적으로 선언함.
#      var answer = 0;
#      for(i = 0; ...) 처럼 'var'나 'let' 없이 선언된 변수 i, j는 전역 변수가 될 위험이 있음 (strict mode 아닐 시).
#      모범 사례는 'let' 또는 'const' 사용 (for(let i = 0; ...)).

# 2. 반복문 (Looping Mechanism)
#    - 파이썬 (위 코드): `for i in range(len(string))` 형식을 주로 사용.
#      이는 0부터 문자열 길이-1까지의 정수(인덱스)를 순회하는 가장 파이썬다운 방식 중 하나.
#      `range()`는 iterable 객체를 반환.
#    - 자바스크립트 (아래 코드): C-style의 `for(초기화; 조건; 증감)` 형식을 주로 사용.
#      for(i = 0; i < s1.length; i++) 처럼 직접 초기화, 조건, 증감을 제어.
#      파이썬의 `range(len(s1))`과 유사한 인덱스 기반 순회를 구현할 때 일반적.

# 3. 문자열 길이 (String Length)
#    - 파이썬: `len(my_string)` 함수 사용. `len()`은 문자열뿐 아니라 리스트, 튜플 등 여러 객체의 길이를 반환하는 내장 함수.
#    - 자바스크립트: `my_string.length` 속성 사용. `.length`는 문자열이나 배열 등의 길이를 반환하는 속성.

# 4. 문자열 접근 (Character Access)
#    - 파이썬: `my_string[i]` 와 같이 대괄호 인덱싱을 통해 문자열의 특정 인덱스 문자 접근.
#    - 자바스크립트: `my_string[i]` 와 같이 파이썬과 동일하게 대괄호 인덱싱을 통해 문자 접근.
#      (자바스크립트에서는 `.charAt(i)` 메서드도 사용 가능하지만, `[]`가 더 흔함.)

# 5. 동등성 비교 연산자 (Equality Operator)
#    - 파이썬: `==` 사용. 값만 비교함.
#    - 자바스크립트: `===` (엄격한 동등) 사용. 값과 타입 모두 비교.
#      `==` (느슨한 동등)도 있지만, 타입 강제 변환 때문에 예측 불가능한 결과를 줄 수 있어 모범 사례로는 `===` 권장.
#      (이 문제에서는 두 문자의 비교이므로 `==`나 `===`나 결과는 동일함.)

# 6. 문법적인 미묘한 차이 (Syntax Nuances)
#    - 파이썬: 콜론(:), 들여쓰기(indentation)로 코드 블록 구분.
#      세미콜론(;)은 문장 끝에 필수가 아님.
#    - 자바스크립트: 중괄호({})로 코드 블록 구분.
#      세미콜론(;)은 문장 끝에 필수는 아니지만 (ASI), 명확성을 위해 사용하는 경우가 많음.

# --- 공통점 ---
# - 중첩 루프(nested loops)를 사용하여 모든 경우의 수(s1의 모든 문자와 s2의 모든 문자)를 비교.
# - 조건문(if)을 사용하여 두 문자가 동일한지 확인.
# - 카운터 변수(answer)를 사용하여 일치하는 쌍의 개수를 증가시킴.
# - 최종적으로 카운터 변수의 값을 반환.
# 이 코드는 언어는 다르지만, 문제 해결을 위한 알고리즘적 접근 방식은 동일하다고 볼 수 있음.
'''