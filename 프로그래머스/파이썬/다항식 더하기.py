# split(' ') 함수 이용, 공백을 기준으로 '양의 정수' 및 '+' 및 'x' 3가지 부류로 나누기
# 더불어 if문을 통해서 위 3가지 종류들을 구분짓기('양의 정수' 및 '+' 및 'x')
# 이때 양의 정수는 int() 활용해서 정수로 변형
# 다만 x 파트도 바꿔줘야 하는데, 어떻게 하면 x의 계수들만 따로 뗄지 고민, 이 로직이 관건
# 위 로직만 구현되면 계수만 따로 더해서 최종값을 도출하면 됨
# 더불어 스택 활용, '양의 정수' 및 'x' 스택을 하나씩 만들고 해당되는 요소 있을 때마다 추가
# 참고로 '양의 정수' 및 'x'의 요소들 갯수를 각각 셀 수 있게끔 하기, 난 이거를 위해서 각각
# x = 0, y = 0을 두고 해당 요소가 나올 때마다 각각 x += 1, y += 1 되게끔 함
# '양의 정수' 및 'x'의 값을 도출하기 위해 for 반복문을 활용해서 x 및 각 요소의 스택 이용해서
# 각각의 '양의 정수'의 최종값 및 'x'의 계수값을 도출, 그리고 각각 string()으로 자료형 바꾸기
# 이유는 아래 작업을 수행하기 위함
# if문 생성, 만약 'x'와 '양의 정수' 2개 모두 있을 때는 '+'로 이어주기, 그러나
# 둘 중에 하나만 있으면 '+' 없이 하나만 나타나게끔 하기

def solution(polynomial): 
    # polynomial 문자열을 공백(' ') 기준으로 분리하여 항들의 리스트를 얻는다.
    terms = polynomial.split(' ')

    # x 항의 계수 합산 변수
    x_coeff_sum = 0
    # 상수항 합산 변수
    const_sum = 0

    # 분리된 항들(item)을 하나씩 순회한다.
    for term in terms:
        if term == '+':
            # '+'는 단순히 구분자이므로 무시하고 넘어간다.
            continue
        elif 'x' in term:
            # 항이 'x'를 포함한다면 (x 항이라면)
            if term == 'x':
                # 'x' 단독 항 (계수 1 생략된 경우)
                x_coeff_sum += 1
            else:
                # 'x' 앞에 숫자가 있는 항 (예: "3x")
                # 'x'를 제외한 앞부분을 숫자로 변환하여 계수에 더한다.
                x_coeff_sum += int(term[:-1]) # term[:-1]은 'x'를 제외한 문자열 부분 (예: "3x"에서 "3")
        else:
            # 항이 'x'를 포함하지 않는다면 (상수항이라면)
            # 숫자로 변환하여 상수항 합산 변수에 더한다.
            const_sum += int(term)

    # x_coeff_sum과 const_sum을 바탕으로 최종 결과 문자열을 구성한다.
    result_parts = [] # 최종 결과의 각 부분을 담을 리스트

    # x 항 처리
    if x_coeff_sum > 0:
        if x_coeff_sum == 1:
            result_parts.append("x") # 계수가 1일 경우 "1x"가 아닌 "x"
        else:
            result_parts.append(f"{x_coeff_sum}x") # 계수와 함께 "Cx" 형태

    # 상수항 처리
    if const_sum > 0:
        result_parts.append(str(const_sum)) # 상수항은 문자열로 변환하여 추가

    # 두 부분이 모두 존재할 경우 '+'로 연결하고, 하나만 있으면 그 하나만 반환한다.
    # result_parts가 비어있을 경우 (모든 항이 0일 경우, 이 문제는 해당 안됨)는 빈 문자열 반환
    # 문제의 제한사항 때문에 모든 항이 0인 경우는 없을 것.
    return " + ".join(result_parts)