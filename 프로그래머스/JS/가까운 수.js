function solution(array, n) {
    array.sort((a,b) => Math.abs(n - a) - Math.abs(n - b) || a - b);

    return array[0];
}

/* array.sort(...):

왜 쓰는지: 자바스크립트 배열의 sort() 메소드는 배열의 요소들을 특정 기준에 따라 정렬할 때 사용해. 이 메소드는 원본 배열 자체를 변경해버려.
어떻게 구현하는지: sort() 메소드에 (a, b) => { ... } 형태의 함수를 매개변수로 전달하면, 이 함수가 a와 b 두 요소를 비교해서 어떤 순서로 정렬할지 sort()에게 알려줘.
음수를 반환하면 a를 b보다 앞에 둬. (a < b인 경우)
양수를 반환하면 b를 a보다 앞에 둬. (a > b인 경우)
0을 반환하면 a와 b의 순서를 변경하지 않아. (a == b인 경우)

|| a - b:

왜 쓰는지: 바로 여기! "가장 가까운 수가 여러 개일 경우 더 작은 수를 return 합니다"라는 2차 정렬 기준을 처리하는 부분이야. 자바스크립트의 논리 OR (||) 연산자의 단축 평가(Short-circuit evaluation) 기능을 활용했어.
어떻게 구현하는지:
자바스크립트에서 X || Y라는 표현식은 X가 참 같은(truthy) 값이면 X를 반환하고, X가 거짓 같은(falsy) 값이면 Y를 반환해.
여기서 거짓 같은 값은 주로 0, null, undefined, false, "", NaN 등이 있어.
이 경우에는 Math.abs(n - a) - Math.abs(n - b)의 결과가 0일 때만 (diffA와 diffB가 같을 때만) 이 부분이 실행돼!
만약 Math.abs(n - a) - Math.abs(n - b)의 결과가 0이 아니라면 (즉, 거리가 다르면), sort()는 그 값을 가지고 정렬 순서를 결정하고 이 뒷부분 (a - b)은 아예 평가조차 되지 않아! (단축 평가!)
결과가 0일 때만 a - b가 평가돼서 반환돼.
a - b의 결과:
a < b이면 음수 -> a를 b보다 앞에 둬.
a > b이면 양수 -> b를 a보다 앞에 둬.
a == b이면 0 -> 순서 변경 없음.
이 a - b 부분이 바로 "거리가 같을 때는 더 작은 수를 먼저 배치"하라는 문제의 2차 조건을 만족시켜줘!
return array[0];:

sort() 메소드에 의해 array 자체가 조건에 맞게 정렬되고 나면, 가장 첫 번째 요소(인덱스 0)가 n과 가장 가깝고, 만약 거리가 같은 경우에는 가장 작은 숫자가 돼! 이 값을 반환하는 거지. */